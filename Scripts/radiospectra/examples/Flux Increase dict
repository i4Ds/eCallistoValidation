from typing import Callable, Dict, List, Union, AnyStr

import pandas as pd
from pandas import DataFrame as df
from radiospectra.sources.callisto import CallistoSpectrogram
from scipy.stats import norm

import configparser
import operator as op

config = configparser.ConfigParser()

ops = {"<": op.lt,
       "<=": op.le,
       "==": op.eq,
       "=!": op.ne,
       ">=": op.ge,
       ">": op.gt}


def ConfigSectionMap(section):
    dict1 = {}
    options = config.options(section)
    for option in options:
        try:
            dict1[option] = config.get(section, option)
            if dict1[option] == -1:
                print("skip: %s" % option)
        except:
            print("exception on %s!" % option)
            dict1[option] = None
    return dict1


# image = CallistoSpectrogram.from_url("http://soleil.i4ds.ch/solarradio/data/2002-20yy_Callisto/2019/01/24/SWISS-BLEN5M_20190124_094500_58.fit.gz")
# image = CallistoSpectrogram.from_url("http://soleil.i4ds.ch/solarradio/data/2002-20yy_Callisto/2010/11/03/BLEN7M_20101103_121505_24.fit.gz")
#image = CallistoSpectrogram.from_url("http://soleil.i4ds.ch/solarradio/data/2002-20yy_Callisto/2018/04/01/ALASKA_20180401_150000_59.fit.gz")
#image = CallistoSpectrogram.from_url("http://soleil.i4ds.ch/solarradio/data/2002-20yy_Callisto/2010/01/02/BLENSW_20100102_084459_59.fit.gz")

image = CallistoSpectrogram.from_url("http://soleil.i4ds.ch/solarradio/data/2002-20yy_Callisto/2010/06/13/OOTY_20100613_053001_58.fit.gz")
#image = CallistoSpectrogram.read(r"C:\Users\David Sommer\Desktop\ALASKA_20180401_150000_59(1).fit.gz")

#def create_datearray(series):
#    ds = image.header['DATE-OBS']
#    de = image.header['DATE-END']
#    ts = image.header['TIME-OBS']
#    te = image.header['TIME-END']
#
#    Date = []
#    date = str(ds) + " " + str(ts) + " - " + str(de) + " " + str(te)
#    Date.append(date)
#
#    return Date


def DF_Success_Lead(x, y, values, time_pos, time_pos_list, last_number, Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos,
                    Eq_Pos, pos_num):
    if x != y:

        freq = index_num

        if x == 1:

            Data_As[freq].append(time_pos_list.copy())
            As_Pos[freq] = pos_num
            values.clear()
            time_pos_list.clear()
            values.append(last_number)
            time_pos_list.append(time_pos - 1)

        elif x == 2:

            Data_Ds[freq].append(time_pos_list.copy())
            Ds_Pos[freq] = pos_num
            values.clear()
            time_pos_list.clear()
            values.append(last_number)
            time_pos_list.append(time_pos - 1)

        elif x == 3:

            Data_Eq[freq].append(time_pos_list.copy())
            Eq_Pos[freq] = pos_num
            values.clear()
            time_pos_list.clear()
            values.append(last_number)
            time_pos_list.append(time_pos - 1)

    x = y
    return x, values, time_pos_list, Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos


def Rec(series):
    values = []
    time_pos_list = []

    x = 0
    pos_num = 0

    freq = index_num

    Data_As = {}
    Data_As[freq] = []
    Data_Ds = {}
    Data_Ds[freq] = []
    Data_Eq = {}
    Data_Eq[freq] = []

    As_Pos = {}
    As_Pos[freq] = []
    Ds_Pos = {}
    Ds_Pos[freq] = []
    Eq_Pos = {}
    Eq_Pos[freq] = []

    for time_pos, value in series.iteritems():

        if time_pos == 0:
            continue

        last_number = series.loc[time_pos - 1]
        present_number = series.loc[time_pos]

        if present_number > last_number:
            x, _, time_pos_list, Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos = DF_Success_Lead(x, 1, values, time_pos,
                                                                                            time_pos_list, last_number,
                                                                                            Data_As, Data_Ds, Data_Eq,
                                                                                            As_Pos, Ds_Pos, Eq_Pos,
                                                                                            pos_num)
            values.append(present_number)
            time_pos_list.append(time_pos)

        elif present_number < last_number:
            x, _, time_pos_list, Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos = DF_Success_Lead(x, 2, values, time_pos,
                                                                                            time_pos_list, last_number,
                                                                                            Data_As, Data_Ds, Data_Eq,
                                                                                            As_Pos, Ds_Pos, Eq_Pos,
                                                                                            pos_num)
            values.append(present_number)
            time_pos_list.append(time_pos)

        elif present_number == last_number:
            x, _, time_pos_list, Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos = DF_Success_Lead(x, 3, values, time_pos,
                                                                                            time_pos_list, last_number,
                                                                                            Data_As, Data_Ds, Data_Eq,
                                                                                            As_Pos, Ds_Pos, Eq_Pos,
                                                                                            pos_num)
            values.append(present_number)
            time_pos_list.append(time_pos)

        else:
            print("Value" + value + "doesn\'t correspond with partner-value.")

    pos_num += 1

    return Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos


def average_increase(Data_As):
    x = 0

    freq = index_num


    value_list = []
    Data_As_ath = {}
    Data_As_ath[freq] = []

    for key_list in Data_As.values():

        for small_list in key_list:

            for time_stamp in small_list:
                value = data.iloc[freq][time_stamp]
                value_list.append(value)


            for pos in range(len(value_list) - 1):


                first_num = value_list[pos]
                next_num = value_list[pos + 1]


                s = next_num - first_num
                t = (small_list[-1] - small_list[0])

                mean_As = s / t

                #mean_As = v / t

                if mean_As >= 1:
                    Data_As_ath[freq].append(small_list.copy())

            value_list.clear()

            pos = 0
    return Data_As_ath


def average_decrease(Data_Ds):
    x = 0
    pos = 0
    freq = index_num

    value_list = []
    Data_Ds_ath = {}
    Data_Ds_ath[freq] = []

    for key_list in Data_Ds.values():

        for small_list in key_list:

            for time_stamp in small_list:
                value = data.iloc[freq][time_stamp]
                value_list.append(value)

            for pos in range(len(value_list) - 1):

                first_num = value_list[pos]
                next_num = value_list[pos + 1]

                s = next_num - first_num
                t = (small_list[-1] - small_list[0])

                v = s / t


                mean_As = v / t

                if mean_As >= 3.0:
                    Data_Ds_ath[freq].append(small_list.copy())


            value_list.clear()

            pos = 0

            x += 1


def visualisation(Data_As_ath):
    ascending_DataFrame = pd.DataFrame(data=0, index=range(200), columns=range(3600))
    for key_list in Data_As_ath.values():

        for small_list in key_list:

            for time_stamp in small_list:
                freq = index_num

                value = data.iloc[freq][time_stamp]

                ascending_DataFrame.at[freq, time_stamp] = value

    return ascending_DataFrame


def std_regions():
    mean_raw,std=norm.fit(data)
    mean = round(mean_raw)

    region_dict = {
        "region_u1" : range(mean,mean+round(std)),
        "region_u2" : range(mean+round(std),mean+round(std*2)),
        "region_u3" : range(mean+round(std*2),mean+round(std*3)),
        "region_u4" : range(mean+round(std*3),mean+round(std*4)),

        "region_d1" : range(mean,mean-round(std)),
        "region_d2" : range(mean-round(std),mean-round(std*2))}

    return

def selection(Data_As_ath):

    freq = index_num

    delta_list = {}
    delta_list[freq] = []
    sum_list = []
    current_pos = 0
    for key_list in Data_As_ath.values():

        for small_list in key_list:
            stamp = small_list[0]

            for time_stamp in small_list:

                sum_list.append(data.iloc[freq][time_stamp])

            r_mean,r_std = norm.fit(sum_list)

            min_delta = r_mean - r_std

            if stamp >= current_pos:
                while stamp < 3600 and data.iloc[freq][stamp] > min_delta:

                    delta_list[freq].append(stamp)
                    stamp+=1
                    current_pos = stamp



    return delta_list

def ath(data,Data_As_ath):
    freq = index_num

    ath_list = {}
    ath_list[freq] = []
    current_pos = 0

    mean, std = norm.fit(data)
    region_delta = mean
    for key_list in Data_As_ath.values():
        for small_list in key_list:
            stamp = small_list[-1]
            if stamp >= current_pos:
                if data.iloc[freq][stamp] > region_delta:
                    for value in small_list:

                        ath_list[freq].append(value)

                while stamp < 3600 and data.iloc[freq][stamp] > region_delta:

                    ath_list[freq].append(stamp)
                    stamp+=1
                    current_pos = stamp

    return ath_list

def fragment_visualisation(delta_list,ath_list):


    for key in delta_list.keys() & ath_list.keys():
        list1 = set(delta_list[key])
        list2 = set(ath_list[key])
        intersection = list1 & list2

#    for (key, value) in (delta_list.items()) & (ath_list.items()):

        freq = index_num
        for value in intersection:

            data_value = data.iloc[freq][value]

            Fragmented_DataFrame.at[freq, value] = data_value

    return Fragmented_DataFrame

def increase_visualisation(Fragmented_DataFrame):
    con_Fragmented_DataFrame = pd.DataFrame(data=0, index=range(200), columns=range(3600))
    for index_num, row in Fragmented_DataFrame.iterrows():
        series = Fragmented_DataFrame.loc[index_num]
        for time_pos, value in series.iteritems():

            if value != 0 and time_pos != 3599 and Fragmented_DataFrame.iloc[index_num][time_pos+1] > value:
                increase = Fragmented_DataFrame.iloc[index_num][time_pos+1] - value #((Fragmented_DataFrame.iloc[index_num][time_pos+1]-value#)/2)/2
                if increase in range(2,8):
                    con_Fragmented_DataFrame.at[index_num, time_pos] = increase

            #elif value != 0 and time_pos != 3599 and Fragmented_DataFrame.iloc[index_num][time_pos+1] < value:
            #    decrease = Fragmented_DataFrame.iloc[index_num][time_pos+1] - value #((Fragmented_DataFrame.iloc[index_num][time_pos+1] - value)/2)/2
            #    if decrease in range(-8,-15):
            #        con_Fragmented_DataFrame.at[index_num, time_pos] = decrease

    return con_Fragmented_DataFrame


data = df(image.data)
Fragmented_DataFrame = pd.DataFrame(data=0, index=range(200), columns=range(3600))
for index_num, row in data.iterrows():
    series = data.loc[index_num]

    Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos = Rec(series)

    Data_As_ath = average_increase(Data_As)

    delta_list = selection(Data_As_ath)
    ath_list=ath(data,Data_As_ath)

    Fragmented_DataFrame = fragment_visualisation(delta_list,ath_list)
r = Fragmented_DataFrame.as_matrix()
testpic = image._with_data(r)

testpic.peek()

con_Fragmented_DataFrame = increase_visualisation(Fragmented_DataFrame)
r = con_Fragmented_DataFrame.as_matrix()
image_conv = image._with_data(r)
image_conv.peek()


#data = df(image.data)
#ascending_DataFrame = pd.DataFrame(data=0, index=range(200), columns=range(3600))
#for index_num, row in data.iterrows():
#    series = data.loc[index_num]
#
#    Data_As, Data_Ds, Data_Eq, As_Pos, Ds_Pos, Eq_Pos = Rec(series)
#
#    Data_As_ath = average_increase(Data_As)
#
#    ascending_DataFrame = visualisation(Data_As_ath)
#
#r = ascending_DataFrame.as_matrix()
#image_conv = image._with_data(r)
#
#image_conv.peek()

